O desenvolvimento de aplicações distribuídas envolve lidar, em geral, com a troca de mensagens entre os computadores que compõem o sistema para o compartilhamento de estado. Esta abordagem é complexa e requer o uso de protocolos para gerenciar e manter consistente entre todas as máquinas o estado compartilhado entre o sistema.

Uma forma comum de compartilhar o estado entre os componentes do sistema é utilizar algum tipo de armazenamento de dados como ponto de integração como, por exemplo, arquivos compartilhados pela rede ou bancos de dados relacionais. A abordagem que utiliza um banco de dados relacional é interessante devido ao alto grau de controle que estes bancos oferecem, como integridade referencial e a execução de comandos que alteram diversos dados de forma atômica, ou seja, ou todos os comandos são concluídos com êxito, ou nenhum comando é executado. Esta utilização consistente dos dados é altamente desejável pois torna o desenvolvimento de aplicações mais simples de ser abordado, sem a necessidade de tratamentos complexos de controle de consistência por parte do desenvolvedor da aplicação. Porém, devido a este controle de consistência, os bancos de dados relacionais (TODO parei aqui)

***Esta abordagem para construir aplicações distribuídas não herda somente os benefícios do SGBD (sistema gerenciador de banco de dados) utilizado, como as propriedades ACID (Atomicidade, Consistência, Isolamento e Durabilidade), mas também alguns inconvenientes, em especial em relação à escalabilidade, uma vez que o banco pode se tornar um gargalo e ser um ponto único de falhas.

Enquanto queremos tirar proveito das propriedades ACID das transações oferecidas por SGBD's, também queremos que as aplicações possam escalar para atender a um número crescente de usuários. Assim, neste trabalho buscamos desenvolver uma infraestrutura que possibilite as aplicações compartilharem estado de forma escalável e mantendo as propriedades ACID, fazendo uso de minitransações, uma extensão do conhecido protocolo 2PC (Two-Phase Commit - efetivação em duas fases) que permite acessar atomicamente ou modificar condicionalmente dados distribuídos em várias máquinas.

Estas em minitransações são disponibilizadas como uma primitiva de programação aos desenvolvedores de aplicação, e permitem que o desenvolvedor passe a tratar o compartilhamento de estado entre o sistema como a criação e manipulação de estruturas de dados compartilhadas, e não precise mais lidar com protocolos e mecanismos de troca de mensagens explicitamente.