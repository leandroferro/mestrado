package net;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;

import node.Controller;

public class Server implements Runnable{

	private final Controller controller;
	private final ServerSocket socket;
	private boolean shouldStop;

	public Server(Controller controller, ServerSocket socket) {
		super();
		this.controller = controller;
		this.socket = socket;
		
		shouldStop = false;
	}

	public void stop() {
		this.shouldStop = true;
	}
	
	@Override
	public void run() {
		while( shouldStop ) {
			Socket client;
			try {
				client = socket.accept();
				
				InputStream inputStream = client.getInputStream();
				OutputStream outputStream = client.getOutputStream();
				
				int command = inputStream.read();
				int position;
				switch(command) {
				case 0: // echo
					for(int b = inputStream.read(); b != -1; b = inputStream.read())
						outputStream.write(b);
					break;
				case 1: // write
					position = inputStream.read();
					ByteArrayOutputStream baos = new ByteArrayOutputStream();
					for(int b = inputStream.read(); b != -1; b = inputStream.read())
						baos.write(b);
					byte[] data = baos.toByteArray();
					controller.write(data, position);
					outputStream.write(data);
					break;
				case 2: // read
					position = inputStream.read();
					int length = inputStream.read();
					outputStream.write(controller.read(position, length));
					break;
				}
				
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} finally {
				if( client != null )
					client.close();
			}
		}
	}
	
}
